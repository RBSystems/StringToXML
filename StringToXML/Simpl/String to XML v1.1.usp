/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Programmer:	Mark Lambertt
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#ENABLE_DYNAMIC
#SYMBOL_NAME "String To XML File v1.1"
#CATEGORY "10" // Serial
#ANALOG_SERIAL_EXPAND InputsWithOutputs

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE

#HELP_BEGIN
	This module saves a set of strings to an XML file. On boot or refresh, reads the file back and populates
	the outputs with the strings. 
	A file based SRAM, in other words.

	Parameter:	Filepath - The location and name of the resultant XML file.
	Parameter:	RecordLabel - The XML element name for each record in the file, <record></record> pairs.
	
	Digital Input:	Refresh - pulse to re-read the file and refresh the outputs.
	String Input:	In - Expandable array of String inputs to be stored.

	Digital Output:	Read_Complete - pulses when the module is finished reading the file
	String Output:	Out - Expanding array of strings that contain the contents of the XML file.
#HELP_END

#INCLUDEPATH "C:\_Work\Crestron Stuff\SIMPL# Libraries"
#USER_SIMPLSHARP_LIBRARY "StringToXML"

#DEFINE_CONSTANT IDLE 0
#DEFINE_CONSTANT BUSY 1
#DEFINE_CONSTANT WAITLEN 15
#DEFINE_CONSTANT PULSEWIDTH 10

#DEFINE_CONSTANT ASIZE 100
#DEFINE_CONSTANT MAXSTRSIZE 256
#DEFINE_CONSTANT FILEPATHLEN 1024

Digital_Input _SKIP_,_SKIP_;
Digital_input Refresh;
STRING_INPUT _SKIP_;
STRING_INPUT In[ASIZE][MAXSTRSIZE];

Digital_Output _SKIP_,_SKIP_;
DIGITAL_OUTPUT Read_Complete;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT Out[ASIZE];

Integer NumIns;
integer ReadLineNumber,waitstate;
string	TempStr[ASIZE][MAXSTRSIZE];
string	OneLineTmpStr[MAXSTRSIZE];
StringToXML STX;

STRING_PARAMETER FilePath[FILEPATHLEN],RecordLabel[MAXSTRSIZE];

#BEGIN_PARAMETER_PROPERTIES FilePath
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "\\NVRAM\\DataFile.XML";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES RecordLabel
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "Record";
#END_PARAMETER_PROPERTIES

Function LoadVals()
{
	integer i;
     
	STX.ReadFile();
	for (ReadLineNumber=1 to NumIns)
	{
		OneLineTmpStr="";
		StX.ReadLine(ReadLineNumber-1); //S# list is 0 based
		out[ReadLineNumber] = OneLineTmpStr;
		TempStr[ReadLineNumber] = OneLineTmpStr;
	}
	pulse(PULSEWIDTH,Read_Complete);	
}

Function WriteVals()
{        
	integer i;
	STX.ClearArray();
	for(i = 1 to NumIns)
	{
		STX.WriteLine(TempStr[i]);
	}
	STX.WriteFile();
}

callback function _myReadLineFromSharp(string value)
{
    //loading the array element TmpStr directly from value seems to truncate the element to the 
	//length of value. Try using an intermediate variable for isolation from the S#
	//I think it's the fact that the callback function uses the S# data structures.
	OneLineTmpStr=value;
}

function waithandler()
{
	if(waitstate = IDLE)
	{
		waitstate = BUSY;
		wait(WAITLEN,WaitForStableState)
		{
			WriteVals();
			waitstate = IDLE;
			LoadVals();
		}
	}
	if(waitstate = BUSY)
	{
		retimewait(WAITLEN,WaitForStableState);
	}
}

threadsafe change In
{
	integer i;

	i=getlastmodifiedarrayindex();
	TempStr[i]=in[i];	
    waithandler();
}

Push Refresh
{
	LoadVals();
}

function Init()
{
	Read_Complete=0;
	waitstate = IDLE;
	//find out how many real outputs we have
	For(NumIns = ASIZE to 1 Step -1)
		If(IsSignalDefined(In[NumIns])) Break;    

	//ClassInstance,CallbackEventName,CallbackFunction
	RegisterDelegate(STX,myReadLineFromSharp,_myReadLineFromSharp);

	STX.Initialize(FilePath,RecordLabel);
	delay((WAITLEN * 3));
	LoadVals();
}

Function Main()
{
	waitforinitializationcomplete();

    Init();                        
}
